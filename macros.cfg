#############################################################################################################
#GCODE_MACRO
#############################################################################################################
# [gcode_macro SHAPER_CALIBRATE]
# rename_existing: RESHAPER_CALIBRATE
# gcode:
#      RESHAPER_CALIBRATE FREQ_START=50 FREQ_END=150

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(-15) %}      #edit to your park position
    {% set y = params.Y|default(220) %}      #edit to your park position
    {% set z = params.Z|default(50)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
	
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    RESPOND TYPE=echo MSG="Cancel Print Success!"
    G91 ;Relative positionning
    G1 E-2 F500 ;Retract a bit
    G1 E-2 Z0.2 F200 ;Retract and raise Z
    G1 Z{z_safe - 0.2} ;Raise Z more
    G90 ;Absolute positionning
    G1 X{x} Y{y} F6000
    G1 X10 Y210 F6000
    M84 X Y E ;Disable all steppers but Z


# Superslicer start gcode:
# M104 S0 ; Stops PS/SS from sending temp waits separately
# M140 S0
# START_PRINT HOTEND_TEMP=[first_layer_temperature] BED_TEMP=[first_layer_bed_temperature] TOTAL_LAYERS=[total_layer_count]
[gcode_macro START_PRINT]
gcode:

	{% if 'HOTEND_TEMP' in params|upper %}
        {% set hotend_temp = params.HOTEND_TEMP|int %}
    {% else %}
        { action_raise_error('Must provide HOTEND_TEMP parameter') }
    {% endif %}
	
	{% if 'BED_TEMP' in params|upper %}
        {% set bed_temp = params.BED_TEMP|int %}
    {% else %}
        { action_raise_error('Must provide BED_TEMP parameter') }
    {% endif %}
	
	{% if 'TOTAL_LAYERS' in params|upper %}
        SET_PRINT_STATS_INFO TOTAL_LAYER={ params.TOTAL_LAYERS|int }
    {% endif %}
	
	{% set initial_hotend_temp = (hotend_temp / 1.4)|round(0)|int %}

	LED_ON

	M140 S{bed_temp} ; set bed temp
	;TEMPERATURE_WAIT SENSOR='temperature_sensor Chamber_Temp' MINIMUM=[chamber_temperature]

	M104 S{initial_hotend_temp} ;start heating hotend WITHOUT WAIT
	
	M190 S{bed_temp} ; wait for bed temp
	
	G28;

	BED_MESH_CALIBRATE
	#{% if 'REDO_MESH' in params|upper and params.REDO_MESH|lower == 'true' %}
	#{% else %}
	#	BED_MESH_PROFILE LOAD=default ; Loads the mesh - now has to be done explicitly, not automatically loaded anymore
	#{% endif %}
	
	SMART_PARK

	M109 S{hotend_temp} ; wait for extruder temp
	
	MR_NOTIFY TITLE=$printer_name MESSAGE="Heating finished, starting print"

	LINE_PURGE

[gcode_macro PURGE_LINE]
gcode:
	G90 ; use absolute coordinates
	G1 Z4.0 F3000 ;Move Z Axis up
	G92 E0 ;Reset Extruder
	G1 X5.1 Y20 Z0.28 F5000.0 ;Move to start position
	G1 X5.1 Y30.0 Z0.28 F1500.0 E1 ;Draw a short bit in case the extruder turns in the wrong direction
	G1 X5.1 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
	G1 X5.4 Y200.0 Z0.28 F5000.0 ;Move to side a little
	G1 X5.4 Y20 Z0.28 F1500.0 E30 ;Draw the second line
	G92 E0 ;Reset Extruder
	G1 Z2.0 F3000 ;Move Z Axis up

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    RESPOND TYPE=echo MSG="Pause Print!"
    ##### set defaults #####
    {% set x = params.X|default(-15) %}      #edit to your park position
    {% set y = params.Y|default(220) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(0.2) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F500
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    RESPOND TYPE=echo MSG="RESUME Print!"
    M117
    ##### set defaults #####
    {% if True %} # detect if occur filament runout ,True: filament exists.  False: filament runout
      {% set e = params.E|default(0) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F400
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %}


[gcode_macro BEFORE_LAYER_CHANGE]
gcode:
	G92 E0.0
	TIMELAPSE_TAKE_FRAME
	{% if 'CURRENT_LAYER' in params|upper %}
		SET_PRINT_STATS_INFO CURRENT_LAYER={ params.CURRENT_LAYER|int }
    {% endif %}
	
[gcode_macro AFTER_LAYER_CHANGE]
gcode:

[gcode_macro END_PRINT]
gcode:
	M400 ; wait for buffer to clear
	
	G91 ;Relative positioning
	G1 X5 Y5 F3000 ;Wipe out
	G1 Z10 ;Raise Z more

	M106 S0 ;Turn-off fan
	TURN_OFF_HEATERS

  ;G28 XY
  home_all
	
  M84 ;X Y E ;Disable all steppers but Z
	
	LED_OFF
	
  RESPOND TYPE=echo MSG="Finish Print!"

[gcode_macro LOAD_FILAMENT]
gcode:
    G91 
    G1 E100 F300
    G1 E10 F150
    G90

[gcode_macro UNLOAD_FILAMENT]
gcode:
    G91
    G1 E-30 F300
    G90

[gcode_macro CHANGE_FILAMENT]
gcode:
  {% if 'NEW_FILAMENT' in params|upper %}
      M117 "Load {params.NEW_FILAMENT}"
  {% else %}
      M117 "Load new filament"
  {% endif %}
  PAUSE Y=0
  UNLOAD_FILAMENT

[gcode_macro _check_if_homed]
gcode:
    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        G28 XY
    {% endif %}
    {% if not 'z' in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}
    
[gcode_macro home_all]
gcode:
  G28 X
  G28 Y
  G28 Z

# SET_PIN PIN=Curtain_Fan_Enable VALUE=0
[gcode_macro SET_PIN]
rename_existing: SET_PIN_BASE
gcode:
  {% if params.PIN == "Curtain_Fan_Enable" %}
    #SET_PIN_BASE { rawparams }
    # SET_FAN_SPEED FAN=Curtain_Fan SPEED=0
    {% if params.VALUE == "1" %}
      SET_FAN_SPEED FAN=Curtain_Fan SPEED={ printer.fan.speed }
    {% else %}
      SET_FAN_SPEED FAN=Curtain_Fan SPEED=0
    {% endif %}
  {% endif %}
  SET_PIN_BASE { rawparams }

[gcode_macro M106]
rename_existing: M106.1
gcode:
  {% set S = params.S|default(0)|int %}
  M106.1 S{ S }

  {% if printer.virtual_pins.pins.curtain_fan_enable.value %}
    {% set SPEED = S/255 %}
    SET_FAN_SPEED FAN=Curtain_Fan SPEED={ SPEED }
  {% endif %}

[gcode_macro M107]
rename_existing: M107.1
gcode:
  M107.1
  {% if printer.virtual_pins.pins.curtain_fan_enable.value %}
    SET_FAN_SPEED FAN=Curtain_Fan SPEED=0
  {% endif %}

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

[gcode_macro M117]
rename_existing: M117.1
gcode:
  M117.1 {rawparams}
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
    MR_NOTIFY TITLE="$printer_name M117" MESSAGE="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}
  